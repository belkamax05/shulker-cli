
#!/usr/bin/env zsh
linker-list-files() {
    local prefix=$(format-cmd "linker-list-files")
    local list=$(linker-list)
    # local files=()
    typeset -A files=()

    __add-key-value() {
        local key="$1"
        local value="$2"
        if is-file "$key"; then
            # echo-debug "$prefix $(format-args "__add-key-value") File: $(format-args "$key") =>  $(format-args "$value")"
            files[$key]="$value"
        elif is-directory "$key"; then
            # echo-debug "$prefix $(format-args "__add-key-value") Directory: $(format-args "$key") =>  $(format-args "$value")"
            find "$key" -type f -print0 | sort -z | while IFS= read -r -d $'\0' file; do
                # echo-debug "$(format-cmd 'each-file-recursive') Processing file: $(format-args "$file")"
                local relativeFilePath="${file#$key/}"
                local destinationPath="$value/$relativeFilePath"
                # echo "Rel: $relativeFilePath, Dest: $destinationPath"
                __add-key-value "$file" "$destinationPath"
            done
        else
            echo "$prefix $(format-args "__add-key-value") Unknown type for key: $(format-args "$key")"
        fi
    }

    # list above is multiline string, where each row is "key|value"
    while IFS= read -r line; do
        local key="${line%%|*}"
        local value="${line#*|}"
        __add-key-value "$key" "$value"
    done <<< "$list"

    for key in ${(k)files}; do
        echo "$key|${files[$key]}"
    done
}
